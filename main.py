import sqlite3
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot_token = ""
admin_ids = [1, 2]
group_id = 

bot = Bot(token=bot_token)
dp = Dispatcher(bot)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('giveaway.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
cursor.execute('''CREATE TABLE IF NOT EXISTS participants (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    username TEXT,
                    number INTEGER,
                    message_id INTEGER,
                    disqualified BOOLEAN DEFAULT 0)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER)''')

conn.commit()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start_giveaway(message: types.Message):
    if message.from_user.id in admin_ids and message.chat.id == group_id:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        await bot.delete_message(message.chat.id, message.message_id)
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        await asyncio.sleep(10)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        cursor.execute('DELETE FROM participants')
        conn.commit()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ –≥—Ä—É–ø–ø–µ
        await bot.send_message(
            group_id,
            "<b>üéâ –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–ø—É—â—ë–Ω!</b>",  # –ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML
            parse_mode="HTML"
        )
        logging.info("–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–ø—É—â–µ–Ω")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ —Å –±–æ—Ç–æ–º
        cursor.execute('SELECT user_id FROM users')
        users = cursor.fetchall()
        for user in users:
            try:
                await bot.send_message(user[0], "üéâ –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–ø—É—â–µ–Ω. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –≤ –≥—Ä—É–ø–ø—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏ —á–∏—Å–ª–∞.")
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop
@dp.message_handler(commands=['stop'])
async def stop_giveaway(message: types.Message):
    if message.from_user.id in admin_ids and message.chat.id == group_id:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        await bot.delete_message(message.chat.id, message.message_id)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        await bot.send_message(
            group_id,
            "<b>‚è≥ –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω. –û–∂–∏–¥–∞–π—Ç–µ –∏—Ç–æ–≥–æ–≤!</b>",  # –ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML
            parse_mode="HTML"
        )
        logging.info("–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        cursor.execute('SELECT user_id FROM users')
        users = cursor.fetchall()
        for user in users:
            try:
                await bot.send_message(user[0], "‚è≥ –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π.")
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /true <—á–∏—Å–ª–æ>
@dp.message_handler(commands=['true'])
async def determine_winner(message: types.Message):
    if message.from_user.id in admin_ids and message.chat.id == group_id:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        await bot.delete_message(message.chat.id, message.message_id)
        
        try:
            target_number = int(message.get_args())
            await asyncio.sleep(10)  # –ü–∞—É–∑–∞ –≤ 10 —Å–µ–∫—É–Ω–¥ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

            cursor.execute('SELECT user_id, username, number, message_id FROM participants WHERE disqualified = 0 ORDER BY ABS(number - ?)', (target_number,))
            participants = cursor.fetchall()

            if participants:
                winner = participants[0]
                nearest = participants[1:11]

                winner_link = f"[{winner[1]}](tg://user?id={winner[0]})"
                number_link = f"[{winner[2]}](https://t.me/c/{str(group_id)[4:]}/{winner[3]})"
                result_text = (f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –≤—ã—è–≤–ª–µ–Ω:\n\n"
                               f"–ò–º—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: {winner_link}\n"
                               f"–ß–∏—Å–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º: {number_link}\n\n"
                               f"–ü–æ—á—Ç–∏ –ø—Ä–∏–±–ª–∏–∑–∏–ª–∏—Å—å:\n")
                
                for user in nearest:
                    user_link = f"[{user[1]}](tg://user?id={user[0]})"
                    number_link = f"[{user[2]}](https://t.me/c/{str(group_id)[4:]}/{user[3]})"
                    result_text += f"{user_link} —Å —á–∏—Å–ª–æ–º {number_link}\n"
                
                await bot.send_message(group_id, result_text, parse_mode="Markdown")
                logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {result_text}")

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞
                cursor.execute('SELECT user_id FROM users')
                users = cursor.fetchall()
                for user in users:
                    try:
                        await bot.send_message(user[0], "üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ–±—ä—è–≤–ª–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")
                    except Exception as e:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")

            else:
                await bot.send_message(group_id, "üö´ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã.")
                logging.info("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã")
        except ValueError:
            await bot.send_message(group_id, "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /true <—á–∏—Å–ª–æ>")
            logging.error("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ–º–∞–Ω–¥—ã")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.edited_message_handler(lambda message: message.text.isdigit())
async def handle_edited_message(message: types.Message):
    if message.chat.id == group_id:
        user_id = message.from_user.id
        cursor.execute('UPDATE participants SET disqualified = 1 WHERE user_id = ?', (user_id,))
        conn.commit()
        await message.answer("üö´ –í—ã –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({user_id}) –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–∏—Å–µ–ª
@dp.message_handler(lambda message: message.text.isdigit())
async def register_number(message: types.Message):
    if message.chat.id == group_id:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø—ã
        user_id = message.from_user.id
        username = message.from_user.username
        number = int(message.text)
        message_id = message.message_id

        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        if cursor.fetchone() is None:
            cursor.execute('INSERT INTO users (user_id) VALUES (?)', (user_id,))
            conn.commit()

        cursor.execute('SELECT * FROM participants WHERE user_id = ?', (user_id,))
        existing_entry = cursor.fetchone()

        if existing_entry is None:
            cursor.execute('INSERT INTO participants (user_id, username, number, message_id) VALUES (?, ?, ?, ?)', (user_id, username, number, message_id))
            logging.info(f"–ß–∏—Å–ª–æ {number} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username} ({user_id})")
        else:
            await message.answer("üîÅ –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —á–∏—Å–ª–æ. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({user_id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ")

        conn.commit()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
